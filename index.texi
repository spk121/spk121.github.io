\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename guile-gi.info
@settitle Guile-GI
@c %**end of header
@syncodeindex fn cp
@include version.texi

@copying
Copyright @copyright{} 2018, 2019, 2020 Michael L. Gran

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
@end copying

@titlepage
@title Guile-GI
@subtitle Version @value{VERSION}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@c @ifnottex
@node Top
@top Guile-GI

This manual is for Guile-GI @value{VERSION}.
@c @end ifnottex

@include intro.texi
@include tutorial.texi

@node Reference Guide
@chapter Reference Guide

The Guile-GI project provides a Guile module @file{(gi)}.  The
@file{(gi)} module is an interface for dynamically creating Guile
modules for GObject-based libraries by examining the information in
their @file{.typelib} files.

@c -----------------------------------------------------------------
@menu
* Typelib Introspection::
* Typelib Documentation::
* GType Constants and Operations::
* Enums and Flags::
* Utilities::
* Compatibility::
* More Stuff::
@end menu

@c -----------------------------------------------------------------
@node Typelib Introspection
@section Typelib Introspection
@cindex typelibs
@cindex introspection

A GObject typelib file contains information on the public classes,
functions, and variables in a GObject-based library, and most
GObject-compliant libraries, such as GLib and GTK, provide one.  Usually
these files are on the file system in a single directory location.  On
Fedora, for example, these files may be stored in
@file{/var/lib64/girepository-1.0}.

All functions outlined in this section are part of @code{(gi
repository)} and are not re-exported by @code{(gi)}.

@deffn Procedure require lib [version]
Forces the namespace @var{lib} to be loaded if it isn't already.
This step is required once per @var{lib} before any other functionality
of this module is used.

If @var{version} is given, loads that version, otherwise loads the
latest available.

Throws an error, if the library could not be found or loaded.
@end deffn

@deffn Procedure get-search-path
This returns the current search path used to find typelib files as a
list of strings.

If it returns an empty list, this indicates that it is only searching
the default typelib directory.
@end deffn

@deffn Procedure prepend-search-path! directory
Given @var{directory}, a string representation of a file system
directory, this prepends that directory to the typelib search path.

This change doesn't affect libraries loaded before it. It therefore is
advisable to put such directives at the start of a script.
@end deffn

@deffn Procedure infos lib
Fetches all top-level metadata entries of @var{lib}.
@end deffn

@deffn Procedure info lib name
Searches @var{lib} for an entry with name @var{name} and returns it.
Throws an error, if @var{name} could not be found.
@end deffn

@deffn Procedure load (info <GBaseInfo>)
@deffnx Procedure load (info <GBaseInfo>) flags
Generates bindings for @var{info}.

@var{flags} is a logical or of @code{LOAD_METHODS}, @code{LOAD_SIGNALS} and
@code{LOAD_PROPERTIES}, and may be 0 or @code{LOAD_INFO_ONLY} tells @code{load},
how to handle infos with nested information, such as structs and objects.
They enable loading of methods, signals, properties and fields respectively.
By default, all of them are loaded.
@end deffn

@deffn Procedure load-by-name lib name [flags]
A convenience function composing @code{info} and @code{load}.
@end deffn

@deffn Procedure typelib->module module lib [version]
Loads all infos of @var{lib} into @var{module} and adds them to its public
interface.

@var{module} may be a module or a list of symbols. If the latter is given,
it is resolved to a (potentially new) module. In either case, the resulting
module is returned.

If @var{version} is given, loads that version, otherwise loads the latest.
Throws an error, if the library could not be found or loaded.
@end deffn

@c -----------------------------------------------------------------
@node Typelib Documentation
@section Typelib Documentation

@deffn Procedure typelib lib [version] [#:require?=#t]
Open a new input port, whose contents describe the runtime bindings created
for @var{lib}. If @var{version} is given, use that version of the typelib,
otherwise the latest. If @var{require?} is true (the default), require
it first.
@end deffn

@deffn Procedure gir lib version
Open a new file input port for the GIR metadata of LIB. VERSION applies just
as with @code{typelib}, but is required.
@end deffn

@deffn Parameter gir-search-path
Search path, that @code{gir} searches GIR metadata in.
This parameter is actually defined in @code{(gi config)}.
@end deffn

@deffn Procedure parse xml [documentation]
Parse @var{xml} into a structure suitable for post-processing.
If @var{documentation} is given, use it as a base, merging the two.

@var{xml} is expected to be a string or port containing documentation in
an XML format. @var{documentation} should either be the empty list (the
default) or the result of a previous @code{parse} operation.

It should be noted, that the order in which documentations are threaded
through @code{parse} matters. The last @code{xml} ``wins'' in cases
where multiple ones fill in the same value (e.g. attributes).  Since
GIRs has more information than typelibs, you should therefore handle
typelibs first in most cases.

The result is a nodeset corresponding to the (merged) XML.  However, it
is stripped down to only contain nodes relevant for documentation (the
exact subset may be subject to change) and also contains the
non-standard @code{scheme} node for bindings created by Guile-GI.
@end deffn

@deffn Procedure ->guile-procedures.txt documentation
Display @var{documentation} in an @file{guile-procedures.txt}-esque style.
@end deffn

@deffn Procedure ->docbook documentation
Display @var{documentation} as DocBook XML.
@quotation Warning
The standard DocBook tools installable through most distributions do
not handle XML, but rather SGML.
Trying to post-process the results of this function with them will
only end up in weird results, (potentially lots of) errors and user frustration.
Use GTK-Doc instead, either directly or through @code{xsltproc},
or use your own XSLT stylesheets.
@end quotation
@end deffn

@c ----------------------------------------------------------------
@node GType Constants and Operations
@section GType Constants and Operations
The @code{(gi types)} module provides these variables and procedures.

@defvar G_TYPE_NONE
@defvarx G_TYPE_CHAR
@defvarx G_TYPE_UCHAR
@defvarx G_TYPE_BOOLEAN
@defvarx G_TYPE_INT
@defvarx G_TYPE_UINT
@defvarx G_TYPE_INT64
@defvarx G_TYPE_UINT64
@defvarx G_TYPE_FLOAT
@defvarx G_TYPE_DOUBLE
These variables hold the GType integer values for the fundamental types.
@end defvar

@defvar G_TYPE_ENUM
@defvarx G_TYPE_FLAGS
@defvarx G_TYPE_STRUCT
@defvarx G_TYPE_OBJECT
These variables hold the GType integer values of the enum, flags,
struct, and object base classes respectively.
@end defvar

@deffn Procedure get-gtype object
Given @var{object}, this procedure returns its GType as an integer. It
returns @code{#f} if the object does not have a type registered in The
GLib Dynamic Type System.
@end deffn

@deffn Procedure gtype-get-scheme-type gtype
Given @var{gtype}, a GType integer ID, this procedure will return the
associated GOOPS class that holds instances of that type, of @code{#f}
if there is no GOOPS class for that @var{gtype}.
@end deffn

@deffn Procedure gtype-get-name gtype
Given @var{gtype} of type @code{<integer>}, this procedure returns
a string with GObject's internal name for this type.  This may differ
slightly from the name that Guile-GI gives to the type.
@end deffn

@deffn Procedure gtype-get-parent gtype
@deffnx Procedure gtype-get-children gtype
These procedures return the parent type and the child types of a
specified @var{gtype} as GType integers.
@end deffn

@deffn Procedure gtype-is-a? object type
Returns @code{#t} of @var{object} is an instance of a @var{type}.
@end deffn

@c ----------------------------------------------------------------
@node Enums and Flags
@section Enums and Flags
While GObject is an OOP framework and as such mainly focuses on objects,
there also exists functionality to deal with enumerated types.
Enumerated types are a way of converting raw numbers into meaningful
expressions and broadly fit into two categories: enumerations and flags.
Both assign tokens to numerical values at compile time, but their use
is different.  Enumerations are used for equality checks only, whereas
flags can be composed through bitwise or, tested by bitwise and, and
operated on in other ways -- as long as the basic operations are
bitwise, the result will make some sense.

In Scheme, the closest analogues to enumerations and flags are symbols
and symbol lists.  Symbol equality can be checked with @code{eq?},
symbol list equality with @code{equal?} and in Guile specifically, the
other operations can be implemented based on the @code{lset-*}
procedures.@footnote{Other implementations may offer similar functions
-- otherwise they can be implemented by the user themselves.}  However,
both of these lose information needed to convert them into a numerical
representation.

In Guile-GI, we bind enumerations and flags to GOOPS objects as we do
with every other object type. Specifically, enums derive from
@code{<GEnum>} and flags derive from @code{<GFlags>}.

@subsection Conversions
@deffn Procedure number->enum (class <class>) (number <number>)
@deffnx Procedure number->enum (class <class>)
@deffnx Procedure number->flags (class <class>) (number <number>)
@deffnx Procedure number->flags (class <class>)
@deffnx Procedure number->@var{type} (number <number>)
Converts @var{number} into an enum or flags of class @var{class}.
Called with just @var{class}, produces a procedure, that can be used to
call itself with just @var{number}.This is often referred to as
currying.

number->@var{type} calls the appropriate constructor for the given
type. Note, that this type is shortened to its name without any
prefixes.  For instance, a @code{GtkOrientation} may be created using
@code{number->orientation}.  We will henceforth refer to this
construction as ``binding @var{class} on @var{type}''
@end deffn

@deffn Procedure symbol->enum (class <class>) (symbol <symbol>)
@deffnx Procedure symbol->enum (class <class>)
@deffnx Procedure symbol->var{type} (symbol <symbol>)
Converts @var{symbol} into an enum of class @var{class}.
Curries. Binds @var{class} on @var{type}.
@end deffn

@deffn Procedure list->flags (class <class>) (list <list>)
@deffnx Procedure list->flags (class <class>)
@deffnx Procedure list->var{type} (list <list>)
Converts @var{symbol} into flags of class @var{class}.
Curries. Binds @var{class} on @var{type}.
@end deffn

@deffn Procedure enum->number (enum <GEnum>)
@deffnx Procedure enum->number (class <class>) (enum <GEnum>)
@deffnx Procedure enum->number (class <class>) (symbol <symbol>)
@deffnx Procedure enum->number (class <class>)
@deffnx Procedure @var{type}->number (class <class>)
If @var{symbol} is given, returns the value represented by @var{symbol}
in @var{class}.

If @var{enum} is given, converts it to a symbol.
If both @var{enum} and @var{class} are given, raises an error
if @var{enum} is not of type @var{class}.

Curries. Binds @var{class} on @var{type}.
@end deffn

@deffn Procedure enum->symbol (enum <GEnum>)
@deffnx Procedure enum->symbol (class <class>) (enum <GEnum>)
@deffnx Procedure enum->symbol (class <class>)
@deffnx Procedure @var{type}->symbol (class <class>)
Converts @var{enum} to a symbol. If @var{class} is given, raises an error
if @var{enum} is not of type @var{class}.
Curries. Binds @var{class} on @var{type}.
@end deffn

@deffn Procedure flags->number (enum <GEnum>)
@deffnx Procedure flags->number (class <class>) (enum <GEnum>)
@deffnx Procedure flags->number (class <class>) (list <list>)
@deffnx Procedure flags->number (class <class>)
@deffnx Procedure @var{type}->number (class <class>)
If @var{list} is given, returns the value represented by @var{list}
in @var{class}.

If @var{flags} is given, converts it to a symbol.
If both @var{flags} and @var{class} are given, raises an error
if @var{flags} is not of type @var{class}.

Curries. Binds @var{class} on @var{type}.
@end deffn

@deffn Procedure flags->list (enum <GEnum>)
@deffnx Procedure flags->list (class <class>) (enum <GEnum>)
@deffnx Procedure flags->list (class <class>)
@deffnx Procedure @var{type}->list (class <class>)
Converts @var{flags} to a list of symbols. If @var{class} is given, raises an error
if @var{flags} is not of type @var{class}.
Curries. Binds @var{flags} on @var{type}.
@end deffn

@subsection Standard Procedure overrides
@code{<GEnum>} and @code{<GFlags>} display as their symbolic/list
representation and also use them in write in lieu of their addresses.
Enumerations can be numerically compared to enumerations and numbers
using @code{=}.  Flags can be numerically compared to flags and numbers
using @code{=}.  Enumerations and flags can be compared to enumerations
and flags of the same type using @code{equal?}.

@subsection R6RS-esque flag operations
Some would certainly like to see an equivalence the enumerated types
discussed above and R6RS enum sets. However, it turns out, that they are
not compatible.  Enumerations are not enum sets, because they are not
sets -- they are atoms.  Flags are not enum sets, because they don't
have a universe.  Instead, they have a numerical mask.  In an enum
universe, each value is distinct from any other. GObject flags can
however be combinations of other flags.  A commonly found pattern is
@code{SOME_READWRITE = SOME_READ | SOME_WRITE} for example.  Hiding
@code{'readwrite} would take a lot of work just so we can explicitly go
against the design of the library writer, which is not a good idea at
all.

To cope with this fact, we implement our own -- similar, albeit somewhat
different -- set of functions, that aim to be close to what you see in
R6RS.

@deffn Procedure enum-universe (class <class>)
@deffnx Procedure enum-universe (enum <GEnum>)
@deffnx Procedure enum-universe (flags <GFlags>)
Returns a list of meaningful symbols (i.e. those that can be used in
@code{symbol->enum} or @code{list->flags}) for @var{class}.
If @var{enum} @var{flags} is given, @var{class} is inferred from it.
@end deffn

@deffn Procedure flags-mask (class <class>)
@deffnx Procedure flags-mask (flags <GFlags>)
Returns flags of class @var{class}, that has all possible values set.
If @var{flags} is given, @var{class} is inferred from it.
@end deffn

@deffn Procedure flags-union (flags <GFlags>) . rest
Constructs the union of all flags given by @var{flags} and @var{rest}.
All of them must belong to the same class.
@end deffn

@deffn Procedure flags-intersection (flags <GFlags>) . rest
Constructs the intersection of all flags given by @var{flags} and @var{rest}.
All of them must belong to the same class.
@end deffn

@deffn Procedure flags-difference (flags1 <GFlags>) (flags2 <GFlags>)
Constructs the difference of @var{flags1} and @var{flags2}.
Both of them must belong to the same class.
@end deffn

@deffn Procedure flags-complement (flags <GFlags>)
Returns the flags not set in @var{flags}.
@end deffn

@deffn Procedure flags-set? (flags <GFlags>) (number <number>)
@deffnx Procedure flags-set? (flags <GFlags>) (symbol <symbol>)
@deffnx Procedure flags-set? (flags <GFlags>) (list <list>)
Return @var{#t} if and only if the flag(s) given by @var{number}, @var{symbol}
or @var{list} are set.
@end deffn

@deffn Procedure flags-projection
@deffnx Procedure flags-projection/list (flags <GFlags>) (class <class>)
@deffnx Procedure flags-projection/list (flags <GFlags>) (flags2 <GFlags>)
@deffnx Procedure flags-projection/number (flags <GFlags>) (class <class>)
@deffnx Procedure flags-projection/number (flags <GFlags>) (flags2 <GFlags>)
Project @var{flags} onto class @var{class}. (@var{class} is inferred from @var{flags2}).

@code{flags-projection/list} constructs flags from all symbols in
@code{(flags->symbol flags)}, that are valid in @code{class}.
@code{flags-projection/number} constructs flags, that have the same bits
set with respect to @code{(flags-mask class)}.

@code{flags-projection} is an alias for @code{flags-projection/list}.
@end deffn

@c ----------------------------------------------------------------
@node Utilities
@section Utilities
@cindex Utilities

The following procedures are in the @code{(gi util)} library.

@subsection Utilities for Guile Modules

@findex default-duplicate-binding-handler
@cindex Guile modules, defining

In core Guile, there are options to tailor handling of
same-named procedures imported into the same module
(@pxref{Creating Guile Modules, ,Creating Guile Modules, guile, Guile Reference Manual}).
The @code{default-duplicate-binding-handler} procedure and the
@code{#:duplicates} option to @code{define-module} can be used to tailor
the strategy.  Choosing a correct behaviour may become important
important when using GObject introspection when many methods,
procedures, and signals may have the same name.

In the @code{(gi util)} library, the following additional helper
procedures are provided.

@deffn Procedure push-duplicate-handler! handler
This utility procedure adds the symbol @var{handler} to the list of
default duplicate handlers. @var{handler} will be placed at the start of
the list, giving it highest priority.
@end deffn

@findex shrug-equals
@defvr {Duplicate handler} shrug-equals
In the case of duplicate bindings whose values are equal (as in @code{eq?}), they are accepted without raising a warning.
@end defvr

@findex use-modules
@findex use-typelibs
@findex symbol-prefix-proc

Another strategy to mitigate the problems posed by same-named
methods, procedures, and variables is to use the @code{#:renamer} option
of @code{use-modules} or @code{use-typelibs}.  Core Guile provides the
@code{symbol-prefix-proc} renamer procedure, which can be used to apply
a prefix to the name of all imported procedures and variables.

This module provides the @code{protect*} renamer.  It is more targeted
than @code{symbol-prefix-proc}; it applies a prefix and/or suffix to
those imports whose names are in a list of provided symbols.

@deffn Procedure protect symbol [prefix] [suffix]
@deffnx Procedure protect* symbols [prefix] [suffix]
Returns a renamer, which ``protects'' @var{symbol}, a symbol or
@var{symbols}, a list of symbols from being overridden, by prepending
prefix and appending suffix, both symbols.  If neither prefix nor suffix
are given, @code{'%} is used as prefix.
@end deffn

@defvr Variable %rnrs-syntax
@defvrx Variable %r5rs-procedures
Constants, which can be applied to @code{protect*}.

@code{%rnrs-syntax} contains R6RS syntax keywords from the
@code{(rnrs syntax)} module. Most of these are also very important to R5RS.

@code{%r5rs-procedures} contains the names of common R5RS procedures that
Guile always provides.
@end defvr

These can be used alone or together to protect important names in Scheme
code.  The following example, for instance, prepends @code{gtk::} to imported
GObject procedures which match R6RS syntax or R5RS procedures.
@lisp
(use-modules (gi)
             (gi util))
(use-typelibs (("Gtk" "3.0")
               #:renamer (protect*
                           (append %rnrs-syntax %safe-r5rs)
                           'gtk::)))
@end lisp
While importing procedures or methods with the same names a Scheme
@emph{syntax} may cause confusion, importing procedures or methods with
the same name as Guile @emph{procedures} is usually not a problem due to
method overloading via GOOPS.

@quotation Note
While this can prevent you from accidentally messing up important procedures, it is usually a better strategy to only include what you need.
@end quotation

@subsection Utilities for Vectors

In the @code{(gi util)} library, the following helper procedures are provided
for use with SRFI-4-type uniform numeric vectors.

@deffn Procedure short-vector->list vec
@deffnx Procedure int-vector->list vec
@deffnx Procedure long-vector->list vec
Converts a SRFI-4 uniform numeric vector of signed integers into an
integer list.
@end deffn

@deffn Procedure list->short-vector lst
@deffnx Procedure list->int-vector lst
@deffnx Procedure list->long-vector lst
Converts a list of integers into an SRFI-4 uniform numeric vector of
signed integers.
@end deffn

@c ----------------------------------------------------------------
@node Compatibility
@section Compatibility
@findex fiddle

Guile-GI normally keeps pointers to the actual objects hidden (for valid
concerns about reference handling), but in some instances it might be
necessary to fiddle with them.  A procedure to do exactly that is
defined in @code{(gi compat)}.
@deffn Procedure fiddle (proc <procedure>) (object <GObject>)
@deffnx Procedure fiddle (proc <procedure>) (boxed <GBoxed>)
Apply @var{proc} on the internal pointer of @var{object} or
@var{boxed}.
@end deffn

Oftentimes, @var{proc} is a procedure from a dynamic library, which takes
exactly one argument (the pointer) and returns exactly one output (the
Scheme object).  Defining many such conversions can be a bit verbose,
so we defined a helper for that.
@deffn Procedure dynamic-fiddler name library
Load @var{name} from @var{library} and convert it to a function, that
takes exactly one pointer and returns a Scheme object.
@end deffn

@cindex Guile-Cairo
One instance, where the above are necessary, is the cairo library,
whose lack of introspection has caused many language bindings to be written
without it.
When loading @code{(gi compat)} in an environment, where
@code{(cairo)} is available, it will automatically create conversion
functions for it.

@deffn Procedure context->cairo context
@deffnx Procedure surface->cairo surface
@deffnx Procedure font-face->cairo font-face
@deffnx Procedure scaled-font->cairo scaled-font
Convert @var{context}, @var{surface}, @var{font-face} or @var{scaled-font}
to the respective @code{(cairo)} smob type.
The conversion adds a reference count to the object, so it should
be freed manually using the correct @code{-destroy} function.
@end deffn

@c ----------------------------------------------------------------
@node More Stuff
@section More Stuff

@subsection Help! Guile-GI overrides core binding X
@findex protect*
@cindex Overrides

In most cases this is nothing to worry about. Guile-GI ensures, that
the core binding is used as the default behaviour when the signature
does not accidentally match that of a function in some typelib.
However, this can still cause issues when Guile-GI overrides syntax.
To protect your syntax (or other variables you deeply care about), use
the @code{protect} or @code{protect*} renamer from @code{(gi util)}.

@subsection Help! Guile-GI bindings conflict with each other
@findex merge-generics
@findex shrug-equals

Most conflicts should be resolved using the @code{merge-generics}
duplicate handler.  However, this handler is not enabled by default, so
you may want to push it to the default duplicate handlers. If this is
still not working, you may somehow have ended up with ``equal''
duplicates, i.e. duplicates, whose bindings resolve to the same value.
To silence warnings about them, use the @code{shrug-equals} duplicate
handler defined in @code{(gi util)}.  If the conflict is still not
resolved, file a bug detailing it.  As a workaround, you may also rename
either binding, which is probably the best way to resolve a duplicate.

@node Further Resources and Contact Info
@chapter Further Resources and Contact Info

Uh, I dunno.

Maybe the Guile mailing list?

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl-1.3.texi

@node The Index
@unnumbered The Index

@printindex cp

@bye
